#!/bin/bash

# Setup 
# Get the relative home of this file
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	export DVPDO_HOME=$(realpath $(dirname $0)/..)
else
	export DVPDO_HOME=$(realpath $(dirname ${BASH_SOURCE})/..)
fi
export DVPDO_HOME
# Import library
. ${DVPDO_HOME}/lib/btbx/lib/btbx.sh

#
# The main path
#

abs_path () {
    case ${1:0:1} in
    .)
        # Relative to current directory
        echo $(realpath $(pwd)/${1})
        return 0
        ;;
    /)
        # Absolute directory
        echo $(realpath ${1})
        return 0
        ;;
    esac
    echo $(realpath ${DVPDO_HOME}/${1})
    return 0
}

show_usage() {
    # Truncates the four leading whitespaces in each line of the usage
    echo "$@"|sed 's/^    //g' >&2
}

show_error() {
    # send errors to stderr
    echo "error: $@" >&2
}

#
# Command helpers
#

load_workspace() {
    if [[ ! -z $1 && -e "${1}/dvpdo.env" ]] ; then
        echo "1"
        export DVPDO_WORKSPACE=$1
    elif [[ -z ${DVPDO_WORKSPACE} && -e "$(pwd)/dvpdo.env" ]] ; then
        echo "2"
        export DVPDO_WORKSPACE=$(pwd)
    else
        echo "Error: dvpdo.env not found in current directory"
        exit 1
    fi
    . ${DVPDO_WORKSPACE}/dvpdo.env
    DVPDO_NAME=$(basename ${DVPDO_WORKSPACE})

    # Check sanity of the image
    DVPDO_IMAGE=$(abs_path ${DVPDO_IMAGE})
    if [[ ! -e ${DVPDO_IMAGE}/Dockerfile ]]; then
        echo "Error: invalid DVPDO_IMAGE - cannot find ${DVPDO_IMAGE}/Dockerfile"
        exit 1
    fi

    # Check sanity of the site
    DVPDO_SITE=$(abs_path ${DVPDO_SITE})
    if [[ ! -e ${DVPDO_SITE}/site.env ]]; then
        echo "Error: invalid DVPDO_SITE - cannot find ${DVPDO_SITE}/site.env"
        exit 1
    fi
    . ${DVPDO_SITE}/site.env
}

workspace_setup() {
    echo ""
    echo "[dvpdo]"
    echo ""

    # Read the workspace
    load_workspace

    # Connect
    ensure_cli_openshift
    k8s_auth_ensure ${DVPDO_K8S_API} ${DVPDO_K8S_NAMESPACE}
    DVPDO_USER=$(oc whoami)
    echo ""

    # Dump results
    echo "- DVPDO_NAME=${DVPDO_NAME}"
    echo "- DVPDO_USER=${DVPDO_USER}"
    echo "- DVPDO_HOME=${DVPDO_HOME}"
    echo "- DVPDO_WORKSPACE=${DVPDO_WORKSPACE}"
    echo "- DVPDO_IMAGE=${DVPDO_IMAGE}"
    echo "- DVPDO_SITE=${DVPDO_SITE}"
    echo "- DVPDO_K8S_API=${DVPDO_K8S_API}"
    echo "- DVPDO_K8S_NAMESPACE=${DVPDO_K8S_NAMESPACE}"
    echo ""
}

#
# Command: template
#

handle_cmd_template() {
    #
    # A subcommand template
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - template]
    Usage: dvpdo template <command> [args]
        sub1: 
        sub2: 
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi

    # Dispatch the command
    local cmd=$1; shift
    local ret=0
    case ${cmd} in
    sub1)
        # TODO: call handlers (either command or dispatch)
        echo "command sub1"
        ret=${?}
        ;;
    sub2)
        # TODO: call handlers (either command or dispatch)
        echo "command sub2"
        ret=${?}
        ;;
    *)
        show_error "Invalid command ${cmd}"
        show_usage "${usage}"
        ret=127
        ;;
    esac
    return ${ret}
}

#
# Command line parsing and handling
#

handle_cmd() {
    #
    # The main command handler
    #
    # We really want to be dead simple by avoiding unnecessary frameworks
    # or constructs for sub command dispatching at the cost of some boilerplate.
    # This is to prevent the complexity of frameworks obstruct readibility.
    #
    # We process sub commands in a hierchical manner where each handler would
    # have their own case statements that dispatches the control to other downstream
    # handler functions that each performs local command parsing.
    #
    # The structure of handlers remain the same across all sub dispatchers
    # An example subcommand handler is handle_cmd_template.
    #
    # The names of handlers should follow the naming convention
    # 'handle_cmd_<command>[_<subcommand>]'
    # to represent this is a command dispatcher
    #
    # Handlers configure global variables, call terminal call handlers
    # or call subcommand handlers for further dispatch
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo]
    Usage: dvpdo <command> <options> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi

    # Dispatch the command
    local cmd=$1; shift
    local ret=0
    case ${cmd} in
    template)
        # We will leave the "template" dispatcher for testing
        # TODO: call handlers (either command or dispatch)
        handle_cmd_template $@
        ret=${?}
        ;;
    *)
        show_error "Invalid command ${cmd}"
        show_usage "${usage}"
        ret=127
        ;;
    esac
    return ${ret}
}

#
# The "Main" section executed only when we're
# not sourced by anybody
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    RET=0
    handle_cmd $@
    RET=${?}
    exit ${RET}
fi
