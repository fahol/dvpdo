#!/bin/bash

# Setup 
# Get the relative home of this file
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	export DVPDO_HOME=$(realpath $(dirname $0)/..)
else
	export DVPDO_HOME=$(realpath $(dirname ${BASH_SOURCE})/..)
fi
export DVPDO_HOME

# Globals 
OS_ARCH=$(uname -o | tr -d '/')-$(uname -m)

# File destination can be configured from the caller
FILE_DST=${FILE_DST:-${DVPDO_HOME}/.${OS_ARCH}}
OC=${FILE_DST}/oc
KC=${FILE_DST}/kubectl
MBA=${FILE_DST}/micromamba
VSCODE=${FILE_DST}/code

#
# Helper functions
#

function with_timeout { 
    timeout="$1"
    shift
    ( 
        eval "$@" &
        child=$!
        trap -- "" SIGTERM 
        (       
                sleep $timeout
                kill $child 2> /dev/null 
        ) &     
        wait $child
    )
}

#
# Openshift Auth
#

k8s_auth_check_context() {
  # Test whether we're authenticated
  if with_timeout 1 ${OC} whoami &> /dev/null; then
    echo "Current context ($(${OC} config current-context)) is authenticated"
    return 0
  fi
  echo "Current context ($(${OC} config current-context)) is NOT authenticated"
  return 1
}

k8s_auth_ensure() {
  URL=$1
  NS=$2
  # Test whether we're authenticated
  if with_timeout 3 ${OC} -s ${URL} whoami &> /dev/null; then
    echo "Already authenticated to ${URL} ($(${OC} config current-context))"
    return 0
  fi

  echo "Authenticating to ${URL}"
  read -p "Enter your NCCS account: " USERNAME
  read -s -p "PASSCODE : " PASSWORD
  echo

  # Authenticate using the provided username and password
  ${OC} login -u "$USERNAME" -p "$PASSWORD" ${URL} &> /dev/null
  if with_timeout 2 ${OC} -s ${URL} whoami &> /dev/null; then
    if [[ ! -z ${NS} ]]; then
      ${OC} -s ${URL} project ${NS} &> ${NS}
    fi
    echo "Authentication successful to ${URL} ($(${OC} config current-context))"
    return 0
  fi

  echo "Authentication failed."
  return 1
}

#
# Downloaders for external binaries
#

function ensure_cli_openshift() {
  # Openshift client source
  OCP_VER=4.12.9
  OCP_BASE=https://mirror.openshift.com/pub/openshift-v4/clients/ocp
  if [[ ! -z ${1} ]]; then
    FILE_DST=$1
  fi
  if [[ -e ${FILE_DST}/oc && -e ${FILE_DST}/kubectl ]]; then
    return 0
  fi

  # Identify the text
  case ${OS_ARCH} in
  Darwin-x86_64)
    ostype=mac 
    ;;
  Darwin-arm64)
    ostype=mac-arm64
    ;;
  GNULinux-x86_64)
    ostype=linux
    ;;
  GNULinux-arm64)
    ostype=linux-arm64
    ;;
  esac

  URL=${OCP_BASE}/${OCP_VER}/openshift-client-${ostype}.tar.gz
  echo "Downloading openshift client from ${URL}"
  temp_dir=$(mktemp -d)
  if [[ -d "$temp_dir" ]]; then
    mkdir -p "$temp_dir"
    curl -o "$temp_dir/oc.tar.gz" ${URL} &> /dev/null
    tar xzf "$temp_dir/oc.tar.gz" -C "$temp_dir"
    mkdir -p ${FILE_DST}
    mv "$temp_dir/oc" ${FILE_DST}/
    mv "$temp_dir/kubectl" ${FILE_DST}/
    chmod 700 ${FILE_DST}/oc
    chmod 700 ${FILE_DST}/kubectl
    rm -rf "$temp_dir"
  fi
  return 0
}

ensure_cli_vscode() {
  if [[ ! -z ${1} ]]; then
    FILE_DST=$1
  fi
  if [[ -e ${FILE_DST}/code ]]; then
    return 0
  fi

  # Download vscode CLI
  case ${OS_ARCH} in
  Darwin-x86_64)
    URL="https://code.visualstudio.com/sha/download?build=stable&os=cli-darwin-x64"
    ;;
  Darwin-arm64)
    URL="https://code.visualstudio.com/sha/download?build=stable&os=cli-darwin-arm64"
    ;;
  GNULinux-x86_64)
    URL="https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64"
    ;;
  GNULinux-arm64)
    URL="https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-arm64"
    ;;
  esac

  temp_dir=$(mktemp -d)
  if [[ -d "$temp_dir" ]]; then
    mkdir -p "$temp_dir"
    curl -Lk ${URL} --output ${temp_dir}/vscode_cli.tar.gz &>/dev/null
    tar xzf "$temp_dir/vscode_cli.tar.gz" -C "$temp_dir"
    mkdir -p ${FILE_DST}
    mv "$temp_dir/code" ${FILE_DST}/
    chmod 700 ${FILE_DST}/code
    rm -rf "$temp_dir"
  fi
  return 0
}

ensure_cli_micromamba() {
  if [[ ! -z ${1} ]]; then
    FILE_DST=$1
  fi
  if [[ -e ${FILE_DST}/micromamba ]]; then
    return 0
  fi

  # Download vscode CLI
  temp_dir=$(mktemp -d)
  mkdir -p ${temp_dir}
  case ${OS_ARCH} in
  Darwin-x86_64)
    curl -Ls https://micro.mamba.pm/api/micromamba/osx-64/latest | tar -xvj -C ${temp_dir} bin/micromamba 
    ;;
  Darwin-arm64)
    curl -Ls https://micro.mamba.pm/api/micromamba/osx-arm64/latest | tar -xvj -C ${temp_dir} bin/micromamba
    ;;
  GNULinux-x86_64)
    curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj -C ${temp_dir} bin/micromamba
    ;;
  GNULinux-arm64)
    curl -Ls https://micro.mamba.pm/api/micromamba/linux-aarch64/latest | tar -xvj -C ${temp_dir} bin/micromamba
    ;;
  esac
  mkdir -p ${FILE_DST}
  mv ${temp_dir}/bin/micromamba ${FILE_DST}/
  chmod 700 ${FILE_DST}/micromamba
  rm -rf ${temp_dir}
  return 0
}

# Adhoc pods on k8s

adhoc_pod_name() {
    echo "adhoc-pod-k8s-$(${OC} whoami)"
}

adhoc_pod_start() {
  local POD_NAME=$(adhoc_pod_name)
  local IMG=$1
  local TIMEOUT=$2
  if [[ -z ${TIMEOUT} ]]; then
    TIMEOUT=300
  fi
  if ${OC} delete --grace-period=1 --timeout=5s po ${POD_NAME}; then echo ""; fi
  ${OC} run --image=${IMG} ${POD_NAME} sleep ${TIMEOUT}
  while [[ $(${OC} get pods ${POD_NAME} -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
    echo "waiting for pod" && sleep 1;
  done
  return 0
}

adhoc_pod_stop() {
  local POD_NAME=$(adhoc_pod_name)
  if ${OC} delete --grace-period=1 --timeout=3s po ${POD_NAME}; then echo ""; fi
  return 0
}

adhoc_pod_exec() {
  local POD_NAME=$(adhoc_pod_name)
  ${OC} exec -it ${POD_NAME} -c ${POD_NAME} -- "$@"
  return $?
}

#
# The main path
#

abs_path () {
    case ${1:0:1} in
    .)
        # Relative to current directory
        echo $(realpath $(pwd)/${1})
        return 0
        ;;
    /)
        # Absolute directory
        echo $(realpath ${1})
        return 0
        ;;
    esac
    echo $(realpath ${DVPDO_HOME}/${1})
    return 0
}

show_usage() {
    # Truncates the four leading whitespaces in each line of the usage
    echo "$@"|sed 's/^    //g' >&2
}

show_error() {
    # send errors to stderr
    echo "error: $@" >&2
}

#
# Command helpers
#

load_workspace() {
    if [[ ! -z $1 && -e "${1}/dvpdo.env" ]] ; then
        echo "1"
        export DVPDO_WORKSPACE=$1
    elif [[ -z ${DVPDO_WORKSPACE} && -e "$(pwd)/dvpdo.env" ]] ; then
        echo "2"
        export DVPDO_WORKSPACE=$(pwd)
    else
        echo "Error: dvpdo.env not found in current directory"
        exit 1
    fi
    . ${DVPDO_WORKSPACE}/dvpdo.env
    DVPDO_NAME=$(basename ${DVPDO_WORKSPACE})

    # Check sanity of the image
    DVPDO_IMAGE=$(abs_path ${DVPDO_IMAGE})
    if [[ ! -e ${DVPDO_IMAGE}/Dockerfile ]]; then
        echo "Error: invalid DVPDO_IMAGE - cannot find ${DVPDO_IMAGE}/Dockerfile"
        exit 1
    fi

    # Check sanity of the site
    DVPDO_SITE=$(abs_path ${DVPDO_SITE})
    if [[ ! -e ${DVPDO_SITE}/site.env ]]; then
        echo "Error: invalid DVPDO_SITE - cannot find ${DVPDO_SITE}/site.env"
        exit 1
    fi
    . ${DVPDO_SITE}/site.env
}

workspace_setup() {
    echo ""
    echo "[dvpdo]"
    echo ""

    # Read the workspace
    load_workspace

    # Connect
    ensure_cli_openshift
    k8s_auth_ensure ${DVPDO_K8S_API} ${DVPDO_K8S_NAMESPACE}
    DVPDO_USER=$(oc whoami)
    echo ""

    # Dump results
    echo "- DVPDO_NAME=${DVPDO_NAME}"
    echo "- DVPDO_USER=${DVPDO_USER}"
    echo "- DVPDO_HOME=${DVPDO_HOME}"
    echo "- DVPDO_WORKSPACE=${DVPDO_WORKSPACE}"
    echo "- DVPDO_IMAGE=${DVPDO_IMAGE}"
    echo "- DVPDO_SITE=${DVPDO_SITE}"
    echo "- DVPDO_K8S_API=${DVPDO_K8S_API}"
    echo "- DVPDO_K8S_NAMESPACE=${DVPDO_K8S_NAMESPACE}"
    echo ""
}

#
# Command: login
#

handle_cmd_login() {
    #
    # subcommand: login
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - login]
        A facade for the `oc login` command of the `oc` CLI utility for openshift.
        Asks for the credentials if kubernetes is not accessible.

    Usage: dvpdo login <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}

#
# Command: init
#

handle_cmd_init() {
    #
    # subcommand: init
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - init]
        Initialize a dvpdo site in a local directory. The `devpdo` utility
        will initialize a workspace site with basic setup.

    Usage: dvpdo init <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: apply
#

handle_cmd_apply() {
    #
    # subcommand: apply
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - apply]
        Deploy the manifests to the target kubernetes namespace.
        Run preliminary setup scripts.

    Usage: dvpdo apply <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: build
#

handle_cmd_build() {
    #
    # subcommand: build
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - build]
        Build the devpdo image defined by the site Dockerfile.

    Usage: dvpdo build <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: start
#

handle_cmd_start() {
    #
    # subcommand: start
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - start]
        Start the dev pod environment. Update the site with the new image
        if necessary.

    Usage: dvpdo start <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: stop
#

handle_cmd_stop() {
    #
    # subcommand: stop
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - stop]
        Stop or pause the dev pod.  Workspace is not destroyed

    Usage: dvpdo stop <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: delete
#

handle_cmd_delete() {
    #
    # subcommand: delete
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - delete]
        Delete all the manifests from openshift

    Usage: dvpdo delete <command> [args]
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi
    return ${ret}
}


#
# Command: template
#

handle_cmd_template() {
    #
    # A subcommand template
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo - template]
    Usage: dvpdo template <command> [args]
        sub1: 
        sub2: 
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi

    # Dispatch the command
    local cmd=$1; shift
    local ret=0
    case ${cmd} in
    sub1)
        # TODO: call handlers (either command or dispatch)
        echo "command sub1"
        ret=${?}
        ;;
    sub2)
        # TODO: call handlers (either command or dispatch)
        echo "command sub2"
        ret=${?}
        ;;
    *)
        show_error "Invalid command ${cmd}"
        show_usage "${usage}"
        ret=127
        ;;
    esac
    return ${ret}
}

#
# Command line parsing and handling
#

handle_cmd() {
    #
    # The main command handler
    #
    # We really want to be dead simple by avoiding unnecessary frameworks
    # or constructs for sub command dispatching at the cost of some boilerplate.
    # This is to prevent the complexity of frameworks obstruct readibility.
    #
    # We process sub commands in a hierchical manner where each handler would
    # have their own case statements that dispatches the control to other downstream
    # handler functions that each performs local command parsing.
    #
    # The structure of handlers remain the same across all sub dispatchers
    # An example subcommand handler is handle_cmd_template.
    #
    # The names of handlers should follow the naming convention
    # 'handle_cmd_<command>[_<subcommand>]'
    # to represent this is a command dispatcher
    #
    # Handlers configure global variables, call terminal call handlers
    # or call subcommand handlers for further dispatch
    #

    # Setup the usage text (show_usage truncates the indent)
    local usage='
    [dvpdo]
        Devpdo is a utility to manage the development environment on Openshift.

    Usage: dvpdo <command> <options> [args]
        init   : Initializes the dvpdo workspace by loading the necessary environment variables and configurations.
        login  : Authenticates the user to the specified Openshift cluster.
        apply  : Applies the configuration files in the dvpdo workspace to the Openshift cluster.
        build  : Builds the Docker image specified in the dvpdo workspace.
        start  : Starts the specified resources in the Openshift cluster.
        stop   : Stops the specified resources in the Openshift cluster.
        delete : Deletes the specified resources from the Openshift cluster.
    '

    # Parse for any global options and shift what we have consumed
    local opt
    while getopts "h" opt; do
        case ${opt} in
            h)
                show_usage "${usage}"
                return 0
                ;;
            \?)
                show_error "Invalid option -${OPTARG}"
                show_usage "${usage}"
                return 1
                ;;
            :)
                show_error "Option -${OPTARG} requires an argument"
                show_usage "${usage}"
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Handle the case where we don't have any arguments
    if [[ ${#} -lt 1 ]]; then
        show_usage "${usage}"
        return 0
    fi

    # Dispatch the command
    local cmd=$1; shift
    local ret=0
    case ${cmd} in
    template)
        # We will leave the "template" dispatcher for testing
        # TODO: call handlers (either command or dispatch)
        handle_cmd_template $@
        ret=${?}
        ;;
    login)
        handle_cmd_login $@
        ret=${?}
        ;;
    init)
        handle_cmd_init $@
        ret=${?}
        ;;
    apply)
        handle_cmd_apply $@
        ret=${?}
        ;;
    build)
        handle_cmd_build $@
        ret=${?}
        ;;
    start)
        handle_cmd_start $@
        ret=${?}
        ;;
    stop)
        handle_cmd_stop $@
        ret=${?}
        ;;
    delete)
        handle_cmd_delete $@
        ret=${?}
        ;;
    *)
        show_error "Invalid command ${cmd}"
        show_usage "${usage}"
        ret=127
        ;;
    esac
    return ${ret}
}

#
# The "Main" section executed only when we're
# not sourced by anybody
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    RET=0
    handle_cmd $@
    RET=${?}
    exit ${RET}
fi
